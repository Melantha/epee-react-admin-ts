{
  // Place your IFaceClientWeb workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "reducer": {
    "scope": "typescript",
    "prefix": "tsreducer",
    "body": [
      "import { ActionTypes, ActionParams } from 'constants/ActionTypes';",
      "",
      "export interface ${1:${TM_FILENAME_BASE/(.*)\\.reducer/${1:/capitalize}/}}ReducerState {",
      "  [key: string]: any;",
      "}",
      "",
      "const initState: ${1:${TM_FILENAME_BASE/(.*)\\.reducer/${1:/capitalize}/}}ReducerState = {};",
      "",
      "export function ${2:${TM_FILENAME_BASE/(.*)\\.reducer/${1}/}}Reducer(state = initState, { type, payload }: ActionParams): ${1:${TM_FILENAME_BASE/(.*)\\.reducer/${1:/capitalize}/}}ReducerState {",
      "  switch (type) {",
      "    case ActionTypes.$0:",
      "      return { ...state, key: payload };",
      "",
      "    default:",
      "      return state;",
      "  }",
      "}"
    ]
  },
  "action": {
    "scope": "typescript",
    "prefix": "tsaction",
    "body": [
      "import { ActionTypes, ValueDispatch } from 'constants/ActionTypes';",
      "",
      "export const ${1:functionName} = () => (dispatch: ValueDispatch) => {",
      "  dispatch({",
      "    type: ActionTypes,",
      "  });",
      "};"
    ]
  },
  "request": {
    "scope": "typescript",
    "prefix": "tsreq",
    "body": [
      "import { Api } from 'constants/Api';",
      "import request from 'utils/request';",
      "",
      "export const ${1:functionName} = () =>",
      "  request<IResponseBody<[]>>(Api);"
    ]
  },
  "ts redux map": {
    "scope": "typescriptreact",
    "prefix": "tsrdxmap",
    "body": [
      "import { ReduxState } from 'reducers';",
      "",
      "const mapStateToProps = ({ $0 }: ReduxState) => ({});",
      "const mapDispatchToProps = {};"
    ]
  },
  "ts react class component": {
    "scope": "typescriptreact",
    "prefix": "tsrcc",
    "body": [
      "import React from 'react';",
      "import styles from '../style/${1:${TM_FILENAME_BASE}}.module.scss';",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Props {",
      "  [key: string]: any;",
      "}",
      "",
      "class ${1:${TM_FILENAME_BASE}} extends React.Component<${1:${TM_FILENAME_BASE}}Props, any> {",
      "  render() {",
      "    return (",
      "      <div>",
      "         $0",
      "      </div>",
      "    );",
      "  }",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}};"
    ]
  },
  "ts react function component": {
    "scope": "typescriptreact",
    "prefix": "tsrfc",
    "body": [
      "import React from 'react';",
      "import styles from '../style/${1:${TM_FILENAME_BASE}}.module.scss';",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Props {",
      "  [key: string]: any;",
      "}",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}(props: ${1:${TM_FILENAME_BASE}}Props) {",
      "  return (",
      "    <div className={styles.wrap}>",
      "      ${0}",
      "    </div>",
      "  );",
      "}"
    ]
  },
  "const {} = object": {
    "scope": "typescriptreact,typescript,javascript",
    "prefix": "co",
    "body": ["const { $0 } = ${1:object};"]
  },
  "const [] = array": {
    "scope": "typescriptreact,typescript,javascript",
    "prefix": "ca",
    "body": ["const [ $0 ] = ${1:array};"]
  },
  "export inteface": {
    "scope": "typescriptreact,typescript",
    "prefix": "ei",
    "body": ["export interface ${1:App} {", "  $0", "}"]
  }
}
